/* -*- C++ -*- */
/* Generated by C:\Users\admin\Desktop\opendds\OpenDDS-3.23.1\bin\opendds_idl version 3.23.1 (ACE version 7.1.0) running on input file Demo.idl */
#ifndef OPENDDS_IDL_GENERATED_DEMOTYPESUPPORTIMPL_H_9LIQCA
#define OPENDDS_IDL_GENERATED_DEMOTYPESUPPORTIMPL_H_9LIQCA

#include <dds/Version.h>
#if !OPENDDS_VERSION_EXACTLY(3, 23, 1)
#  error "This file should be regenerated with opendds_idl"
#endif
#include <dds/DCPS/Definitions.h>

#include <dds/DdsDcpsC.h>

#include "DemoC.h"
#include "DemoTypeSupportC.h"
#include "dds/DCPS/Serializer.h"
#include "dds/DCPS/Service_Participant.h"
#include "dds/DCPS/TypeSupportImpl.h"
#include "dds/DCPS/Util.h"
#include "dds/DCPS/ValueDispatcher.h"
#include "dds/DCPS/ValueReader.h"
#include "dds/DCPS/ValueWriter.h"
#include "dds/DCPS/XTypes/TypeObject.h"


/* Begin MODULE: CORBA */


/* End MODULE: CORBA */


/* Begin MODULE: OpenDDS */


/* End MODULE: OpenDDS */


/* Begin MODULE: OpenDDS */


/* End MODULE: OpenDDS */


/* Begin MODULE: DemoIdlModule */



/* Begin STRUCT: DemoTopic1 */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

struct DemoIdlModule_DemoTopic1_xtag {};
template<> const XTypes::TypeIdentifier& getMinimalTypeIdentifier<DemoIdlModule_DemoTopic1_xtag>();

template<> const XTypes::TypeMap& getMinimalTypeMap<DemoIdlModule_DemoTopic1_xtag>();

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool vread(OpenDDS::DCPS::ValueReader& value_reader,  ::DemoIdlModule::DemoTopic1& value);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const  ::DemoIdlModule::DemoTopic1& value);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<> void set_default( ::DemoIdlModule::DemoTopic1& stru);

void serialized_size(const Encoding& encoding, size_t& size, const ::DemoIdlModule::DemoTopic1& stru);

bool operator<<(Serializer& strm, const ::DemoIdlModule::DemoTopic1& stru);

bool operator>>(Serializer& strm,  ::DemoIdlModule::DemoTopic1& stru);

void serialized_size(const Encoding& encoding, size_t& size, const NestedKeyOnly<const ::DemoIdlModule::DemoTopic1>& stru);

bool operator<<(Serializer& strm, const NestedKeyOnly<const ::DemoIdlModule::DemoTopic1>& stru);

bool operator>>(Serializer& strm, const NestedKeyOnly< ::DemoIdlModule::DemoTopic1>& stru);

void serialized_size(const Encoding& encoding, size_t& size, const KeyOnly<const ::DemoIdlModule::DemoTopic1>& stru);

bool operator<<(Serializer& strm, const KeyOnly<const ::DemoIdlModule::DemoTopic1>& stru);

bool operator>>(Serializer& strm, const KeyOnly< ::DemoIdlModule::DemoTopic1>& stru);

template <>
struct MarshalTraits< ::DemoIdlModule::DemoTopic1> {
  static void representations_allowed_by_type(DDS::DataRepresentationIdSeq& seq)
  {
    seq.length(4);
    seq[0] = DDS::XCDR_DATA_REPRESENTATION;
    seq[1] = DDS::XCDR2_DATA_REPRESENTATION;
    seq[2] = DDS::XML_DATA_REPRESENTATION;
    seq[3] = OpenDDS::DCPS::UNALIGNED_CDR_DATA_REPRESENTATION;
  }

  static SerializedSizeBound serialized_size_bound(const Encoding& encoding)
  {
    switch (encoding.kind()) {
    case Encoding::KIND_UNALIGNED_CDR:
      return SerializedSizeBound();
    case Encoding::KIND_XCDR1:
      return SerializedSizeBound();
    case Encoding::KIND_XCDR2:
      return SerializedSizeBound();
    default:
      OPENDDS_ASSERT(false);
      return SerializedSizeBound();
    }
  }

  static SerializedSizeBound key_only_serialized_size_bound(const Encoding& encoding)
  {
    switch (encoding.kind()) {
    case Encoding::KIND_UNALIGNED_CDR:
      return SerializedSizeBound(4);
    case Encoding::KIND_XCDR1:
      return SerializedSizeBound();
    case Encoding::KIND_XCDR2:
      return SerializedSizeBound();
    default:
      OPENDDS_ASSERT(false);
      return SerializedSizeBound();
    }
  }

  static bool to_message_block(ACE_Message_Block&, const  ::DemoIdlModule::DemoTopic1&) { return false; }
  static bool from_message_block( ::DemoIdlModule::DemoTopic1&, const ACE_Message_Block&) { return false; }
  static Extensibility extensibility() { return APPENDABLE; }
  static Extensibility max_extensibility_level() { return APPENDABLE; }
};
} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace DemoIdlModule {
/// This structure supports use of std::map with one or more keys.
struct  DemoTopic1_OpenDDS_KeyLessThan {
  bool operator()(const  ::DemoIdlModule::DemoTopic1& v1, const  ::DemoIdlModule::DemoTopic1& v2) const
  {
    using ::operator<; // TAO::String_Manager's operator< is in global NS
    if (v1.id < v2.id) return true;
    if (v2.id < v1.id) return false;
    return false;
  }
};
}


namespace DemoIdlModule {
class DemoTopic1TypeSupportImpl;
}

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS {
namespace DCPS {
template <>
struct DDSTraits< ::DemoIdlModule::DemoTopic1> {
  typedef  ::DemoIdlModule::DemoTopic1 MessageType;
  typedef  ::DemoIdlModule::DemoTopic1Seq MessageSequenceType;
  typedef  ::DemoIdlModule::DemoTopic1Seq::PrivateMemberAccess MessageSequenceAdapterType;
  typedef  ::DemoIdlModule::DemoTopic1TypeSupport TypeSupportType;
  typedef  ::DemoIdlModule::DemoTopic1TypeSupportImpl TypeSupportImplType;
  typedef  ::DemoIdlModule::DemoTopic1DataWriter DataWriterType;
  typedef  ::DemoIdlModule::DemoTopic1DataReader DataReaderType;
  typedef  ::DemoIdlModule::DemoTopic1_OpenDDS_KeyLessThan LessThanType;
  typedef OpenDDS::DCPS::KeyOnly<const  ::DemoIdlModule::DemoTopic1> KeyOnlyType;
  typedef OpenDDS::DCPS::DemoIdlModule_DemoTopic1_xtag XtagType;

  static const char* type_name() { return "DemoIdlModule::DemoTopic1"; }
  static bool gen_has_key() { return true; }
  static size_t key_count() { return 1; }
};
} // namespace DCPS
} // namespace OpenDDS
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace DemoIdlModule {
class  DemoTopic1TypeSupportImpl
  : public virtual OpenDDS::DCPS::LocalObject<DemoTopic1TypeSupport>
  , public virtual OpenDDS::DCPS::TypeSupportImpl_T<DemoTopic1>
  , public virtual OpenDDS::DCPS::ValueDispatcher_T<DemoTopic1>
{
public:
  typedef DemoTopic1TypeSupport TypeSupportType;
  typedef DemoTopic1TypeSupport::_var_type _var_type;
  typedef DemoTopic1TypeSupport::_ptr_type _ptr_type;

  DemoTopic1TypeSupportImpl() {}
  virtual ~DemoTopic1TypeSupportImpl() {}

  virtual ::DDS::DataWriter_ptr create_datawriter();
  virtual ::DDS::DataReader_ptr create_datareader();
#ifndef OPENDDS_NO_MULTI_TOPIC
  virtual ::DDS::DataReader_ptr create_multitopic_datareader();
#endif /* !OPENDDS_NO_MULTI_TOPIC */
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
  virtual const OpenDDS::DCPS::MetaStruct& getMetaStructForType();
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */

  virtual const OpenDDS::XTypes::TypeIdentifier& getMinimalTypeIdentifier() const;
  virtual const OpenDDS::XTypes::TypeMap& getMinimalTypeMap() const;

  virtual const OpenDDS::XTypes::TypeIdentifier& getCompleteTypeIdentifier() const;
  virtual const OpenDDS::XTypes::TypeMap& getCompleteTypeMap() const;

  static DemoTopic1TypeSupport::_ptr_type _narrow(CORBA::Object_ptr obj);
};

}

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

class MetaStruct;

template<typename T>
const MetaStruct& getMetaStruct();

template<>
const MetaStruct& getMetaStruct< ::DemoIdlModule::DemoTopic1>();
bool gen_skip_over(Serializer& ser,  ::DemoIdlModule::DemoTopic1*);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: DemoTopic1 */

/* End MODULE: DemoIdlModule */
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif /* OPENDDS_IDL_GENERATED_DEMOTYPESUPPORTIMPL_H_9LIQCA */
